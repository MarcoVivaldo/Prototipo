<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>IF _CNC_Coord[0].Cfg.CoordEnable=_eCNC_COORD_USE#_cncUsedCoord THEN&#xD;
	// CS status&#xD;
	CncCsStatus[0].Sta.CsStatus:=_CNC_Coord[0].Status;&#xD;
	// CS monitor&#xD;
	IF (CncCsStatus[0].Sta.CsCtrlOutputs.ModalStatus.Unit &lt;&gt; cNativeUnit) THEN&#xD;
 		IF(cNativeUnit= 0) THEN &#xD;
			unitScaling := LREAL#25.4;&#xD;
 		ELSE&#xD;
			unitScaling := (LREAL#1.0 / LREAL#25.4);&#xD;
		END_IF;&#xD;
	ELSE&#xD;
		unitScaling := LREAL#1.0;&#xD;
	END_IF;&#xD;
	IF(PositioningMotorNo[0] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPos.X := (_CNC_Motor[PositioningMotorNo[0]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(PositioningMotorNo[1] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPos.Y := (_CNC_Motor[PositioningMotorNo[1]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(PositioningMotorNo[2] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPos.Z := (_CNC_Motor[PositioningMotorNo[2]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(PositioningMotorNo[3] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPos.A := (_CNC_Motor[PositioningMotorNo[3]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(PositioningMotorNo[4] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPos.B := (_CNC_Motor[PositioningMotorNo[4]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(PositioningMotorNo[5] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPos.C := (_CNC_Motor[PositioningMotorNo[5]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(GantrySlaveMotorNo[0] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPosGantrySlave.X := (_CNC_Motor[GantrySlaveMotorNo[0]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(GantrySlaveMotorNo[1] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPosGantrySlave.Y := (_CNC_Motor[GantrySlaveMotorNo[1]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	IF(GantrySlaveMotorNo[2] &lt;&gt; UINT#65535) THEN&#xD;
		CncCsStatus[0].AxesInfo.ActPosGantrySlave.Z := (_CNC_Motor[GantrySlaveMotorNo[2]].Act.Pos * unitScaling);&#xD;
	END_IF;&#xD;
	CncCsStatus[0].AxesInfo.ActPosGantrySlave.A := 0;&#xD;
	CncCsStatus[0].AxesInfo.ActPosGantrySlave.B := 0;&#xD;
	CncCsStatus[0].AxesInfo.ActPosGantrySlave.C := 0;&#xD;
&#xD;
	CncCsStatus[0].AxesInfo.CmdPos:=_CNC_Coord[0].AxCmdPos;&#xD;
	CncCsStatus[0].AxesInfo.ProgPos:=_CNC_Coord[0].AxProgPos;&#xD;
	CncCsStatus[0].AxesInfo.RelPos.X:=_CNC_Coord[0].AxCmdPos.X - CncCsStatus[0].AxesInfo.HomePos.X;&#xD;
	CncCsStatus[0].AxesInfo.RelPos.Y:=_CNC_Coord[0].AxCmdPos.Y - CncCsStatus[0].AxesInfo.HomePos.Y;&#xD;
	CncCsStatus[0].AxesInfo.RelPos.Z:=_CNC_Coord[0].AxCmdPos.Z - CncCsStatus[0].AxesInfo.HomePos.Z;&#xD;
	CncCsStatus[0].AxesInfo.RelPos.A:=_CNC_Coord[0].AxCmdPos.A - CncCsStatus[0].AxesInfo.HomePos.A;&#xD;
	CncCsStatus[0].AxesInfo.RelPos.B:=_CNC_Coord[0].AxCmdPos.B - CncCsStatus[0].AxesInfo.HomePos.B;&#xD;
	CncCsStatus[0].AxesInfo.RelPos.C:=_CNC_Coord[0].AxCmdPos.C - CncCsStatus[0].AxesInfo.HomePos.C;	&#xD;
	CncCsStatus[0].AxesInfo.DistanceToGo:=_CNC_Coord[0].AxDistanceToGo;&#xD;
	&#xD;
	CncCsStatus[0].AxesInfo.Feedrate.ActVel:=_CNC_Coord[0].Feedrate.ActVel;&#xD;
	CncCsStatus[0].AxesInfo.Feedrate.CmdVel:=_CNC_Coord[0].Feedrate.CmdVel;&#xD;
	CncCsStatus[0].AxesInfo.Feedrate.RatioOverride:=CncCsInputRef[0].FeedrateVelFactor;&#xD;
	CncCsStatus[0].AxesInfo.Spindle.RatioOverride:=CncCsInputRef[0].SpindleVelFactor;&#xD;
	&#xD;
	CncCsStatus[0].AxesInfo.FollowingError.X:=_CNC_Coord[0].AxCmdPos.X - _CNC_Coord[0].AxActPos.X;&#xD;
	CncCsStatus[0].AxesInfo.FollowingError.Y:=_CNC_Coord[0].AxCmdPos.Y - _CNC_Coord[0].AxActPos.Y;&#xD;
	CncCsStatus[0].AxesInfo.FollowingError.Z:=_CNC_Coord[0].AxCmdPos.Z - _CNC_Coord[0].AxActPos.Z;&#xD;
	CncCsStatus[0].AxesInfo.FollowingError.A:=_CNC_Coord[0].AxCmdPos.A - _CNC_Coord[0].AxActPos.A;&#xD;
	CncCsStatus[0].AxesInfo.FollowingError.B:=_CNC_Coord[0].AxCmdPos.B - _CNC_Coord[0].AxActPos.B;&#xD;
	CncCsStatus[0].AxesInfo.FollowingError.C:=_CNC_Coord[0].AxCmdPos.C - _CNC_Coord[0].AxActPos.C;&#xD;
&#xD;
IF (_CNC_Coord[0].Cfg.PosMotorNum &gt; UINT#0) THEN&#xD;
 		FOR j:=UINT#0 TO (_CNC_Coord[0].Cfg.PosMotorNum - UINT#1) BY UINT#1 DO&#xD;
  			CncCsStatus[0].AxesInfo.Motor.TrqAxes[j] := _CNC_Motor[_CNC_Coord[0].Cfg.PosAxes[j].MotorNo].Act.Trq;&#xD;
  			CncCsStatus[0].AxesInfo.Motor.ServoOnAxes[j] := _CNC_Motor[_CNC_Coord[0].Cfg.PosAxes[j].MotorNo].DrvStatus.ServoOn;  &#xD;
  			CncCsStatus[0].AxesInfo.Motor.HomedAxes[j] := _CNC_Motor[_CNC_Coord[0].Cfg.PosAxes[j].MotorNo].Details.Homed;&#xD;
 		END_FOR;&#xD;
	END_IF;&#xD;
IF(_CNC_Coord[0].Cfg.SpindleAxes[0].MotorNo &lt;&gt; UINT#65535) THEN	&#xD;
	CncCsStatus[0].AxesInfo.Motor.TrqSpindle:=_CNC_Motor[_CNC_Coord[0].Cfg.SpindleAxes[0].MotorNo].Act.Trq;&#xD;
	CncCsStatus[0].AxesInfo.Motor.ServoOnSpindle := _CNC_Motor[_CNC_Coord[0].Cfg.SpindleAxes[0].MotorNo].DrvStatus.ServoOn;&#xD;
	CncCsStatus[0].AxesInfo.Motor.HomedSpindle := _CNC_Motor[_CNC_Coord[0].Cfg.SpindleAxes[0].MotorNo].Details.Homed;	&#xD;
	CncCsStatus[0].AxesInfo.Spindle.ActVel:=_CNC_Motor[_CNC_Coord[0].Cfg.SpindleAxes[0].MotorNo].Act.Vel;&#xD;
	CncCsStatus[0].AxesInfo.Spindle.CmdVel:=_CNC_Motor[_CNC_Coord[0].Cfg.SpindleAxes[0].MotorNo].Cmd.Vel;	&#xD;
END_IF;&#xD;
&#xD;
	//CS Relative Home Position&#xD;
	IF CncCsCmd[0].SaveHome.ExeSaveHomePos THEN&#xD;
		CncCsStatus[0].AxesInfo.HomePos:=_CNC_Coord[0].AxCmdPos;&#xD;
		CncCsCmdSta[0].SaveHome.Sta.Done:=TRUE;&#xD;
	ELSE&#xD;
		CncCsCmdSta[0].SaveHome.Sta.Done:=FALSE;&#xD;
	END_IF;&#xD;
	&#xD;
END_IF;</Text></StructuredTextModel>