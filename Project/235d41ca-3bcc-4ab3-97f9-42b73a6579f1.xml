<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>	X2Y2:=(I_lrPos_X**2) + (I_lrPos_Y**2);&#xD;
	SumLenSqrd:=(I_lrL1**2)+(I_lrL2**2);&#xD;
	DifLenSqrd:=I_lrL1**2-I_lrL2**2;&#xD;
	ProdOfLens:=2*I_lrL1*I_lrL2;&#xD;
	Bcos:= (X2Y2 - SumLenSqrd) / ProdOfLens;&#xD;
	&#xD;
	Bangle:=acos(Bcos);&#xD;
	AplusC:=atan(I_lrPos_Y/I_lrPos_X);&#xD;
	Cangle:=acos((X2Y2 + DifLenSqrd) / (2 * I_lrL1 * sqrt(X2Y2)));&#xD;
	Aangle:=AplusC+Cangle;&#xD;
&#xD;
	// extra code for other elbow orientation&#xD;
	//&#xD;
	(*Aangle = AplusC + Cangle*)&#xD;
	(*Bangle = -Bangle*)&#xD;
		//&#xD;
&#xD;
	Q_lrPos_J1:=RadToDeg(Aangle);&#xD;
	Q_lrPos_J2:=RadToDeg(-Bangle);&#xD;
&#xD;
(*&#xD;
		// motor #3 is A programmed angle + offset made by robot orientation&#xD;
		KinPosMotor6 = (KinPosAxisA - (Bangle + Aangle)) * CtsPerDeg;&#xD;
&#xD;
		KinPosMotor5 = KinPosAxisY&#xD;
&#xD;
		InvKinErr = 0;&#xD;
	}&#xD;
	else  // Not valid, halt operation&#xD;
	{    &#xD;
		InvKinErr = 1; // Set flag for external use&#xD;
		Coord[1].ErrorStatus = 255; // Stop execution&#xD;
	}&#xD;
close&#xD;
*)</Text></StructuredTextModel>