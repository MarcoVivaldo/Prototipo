<StructuredTextModel xmlns="http://schemas.datacontract.org/2004/07/Omron.Cxap.Modules.StructuredText.Core" xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Text>Inst_R_TRIG(Clk:=Execute);&#xD;
&#xD;
IF Inst_R_TRIG.Q AND NOT(wExecuting) THEN&#xD;
	wExeOpen:=TRUE;&#xD;
	wStateNo:=UINT#1;&#xD;
	wFileName:=FileName;&#xD;
	PitchCompData.Enabled:=FALSE;&#xD;
	PitchCompData.FileName:='';&#xD;
	wErrorID:=WORD#0000;&#xD;
	wExecuting:=TRUE;&#xD;
ELSIF NOT(Execute) AND NOT(wExecuting) THEN&#xD;
	wStateNo:=UINT#0;&#xD;
	wIdx:=UINT#0;&#xD;
	wExeOpen:=FALSE;&#xD;
	wExeGets:=FALSE;&#xD;
	wExeClose:=FALSE;&#xD;
END_IF;&#xD;
&#xD;
CASE wStateNo OF&#xD;
    1:	//FileOpen&#xD;
		IF wOutput_Open.Error THEN&#xD;
			wExeOpen:=FALSE;&#xD;
			wStateNo:=UINT#9;&#xD;
			wErrorID:=wOutput_Open.ErrorID;&#xD;
		ELSIF wOutput_Open.Done THEN&#xD;
			wExeOpen:=FALSE;&#xD;
			wExeGets:=TRUE;&#xD;
			wStateNo:=UINT#2;&#xD;
		END_IF;&#xD;
&#xD;
	2:	//FileGets&#xD;
		wExeGets:=TRUE;&#xD;
		IF wOutput_Gets.Error THEN&#xD;
			wExeGets:=FALSE;&#xD;
			wExeClose:=TRUE;&#xD;
			wStateNo:=UINT#4;&#xD;
			wErrorID:=wOutput_Gets.ErrorID;&#xD;
		ELSIF wOutput_Gets.Done THEN&#xD;
			wExeGets:=FALSE;&#xD;
			wStr:=DELETE( wStr, UINT#1, LEN(wStr) );&#xD;
			CompTable[wIdx]:=STRING_TO_REAL(wStr);&#xD;
			Inc(wIdx);&#xD;
			IF(wEOF)THEN&#xD;
				wStateNo:=UINT#3;&#xD;
				wExeClose:=TRUE;&#xD;
			END_IF;&#xD;
		END_IF;&#xD;
	&#xD;
	3:	//FileClose&#xD;
		IF wOutput_Close.Error THEN&#xD;
			wExeClose:=FALSE;&#xD;
			wStateNo:=UINT#9;&#xD;
			wErrorID:=wOutput_Close.ErrorID;&#xD;
		ELSIF wOutput_Close.Done THEN&#xD;
			wExeClose:=FALSE;&#xD;
			wStateNo:=UINT#5;&#xD;
			PitchCompData.Enabled:=TRUE;&#xD;
			PitchCompData.FileName:=wFileName;&#xD;
		END_IF;&#xD;
&#xD;
	4:	//Error-&gt;FileClose&#xD;
		IF wOutput_Close.Error OR wOutput_Close.Done THEN&#xD;
			wExeClose:=FALSE;&#xD;
			wStateNo:=UINT#9;&#xD;
		END_IF;&#xD;
		&#xD;
	5:	//Done&#xD;
		IF NOT(Execute) THEN&#xD;
			wStateNo:=0;&#xD;
			wExecuting:=FALSE;&#xD;
		END_IF;&#xD;
	&#xD;
	9:	//Error&#xD;
		IF NOT(Execute) THEN&#xD;
			wStateNo:=0;&#xD;
			wExecuting:=FALSE;&#xD;
		END_IF;&#xD;
ELSE&#xD;
    ;&#xD;
END_CASE;&#xD;
&#xD;
//Instance&#xD;
Inst_FileOpen(&#xD;
	Execute:=wExeOpen,&#xD;
	FileName:=wFileName,&#xD;
	Mode:=_eFOPEN_MODE#_READ_EXIST,&#xD;
	Done=&gt;wOutput_Open.Done,&#xD;
	Busy=&gt;wOutput_Open.Busy,&#xD;
	Error=&gt;wOutput_Open.Error,&#xD;
	ErrorID=&gt;wOutput_Open.ErrorID,&#xD;
	FileID=&gt;wFileID);&#xD;
&#xD;
Inst_FileGets(&#xD;
	Execute:=wExeGets,&#xD;
	FileID:=wFileID,&#xD;
	TrimLF:=TRUE,&#xD;
	Done=&gt;wOutput_Gets.Done,&#xD;
	Busy=&gt;wOutput_Gets.Busy,&#xD;
	Error=&gt;wOutput_Gets.Error,&#xD;
	ErrorID=&gt;wOutput_Gets.ErrorID,&#xD;
	Out=&gt;wStr,&#xD;
	EOF=&gt;wEOF);&#xD;
&#xD;
Inst_FileClose(&#xD;
	Execute:=wExeClose,&#xD;
	FileID:=wFileID,&#xD;
	Done=&gt;wOutput_Close.Done,&#xD;
	Busy=&gt;wOutput_Close.Busy,&#xD;
	Error=&gt;wOutput_Close.Error,&#xD;
	ErrorID=&gt;wOutput_Close.ErrorID);&#xD;
&#xD;
//Output&#xD;
Done:=cOutVal[0, wStateNo];&#xD;
Busy:=cOutVal[1, wStateNo];&#xD;
Error:=cOutVal[2, wStateNo];&#xD;
ErrorID:=wErrorID;</Text></StructuredTextModel>